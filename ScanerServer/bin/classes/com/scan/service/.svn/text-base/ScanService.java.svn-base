package com.scan.service;
import com.hsm.barcode.DecodeResult;
import com.hsm.barcode.Decoder;
import com.hsm.barcode.DecoderConfigValues.SymbologyID;
import com.hsm.barcode.DecoderException;
import com.hsm.barcode.SymbologyConfig;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;


public class ScanService extends Service {
	
	private static final int INIT_OK = 1 ;
	private static final int  INIT_FAIL = -1 ;
	
	private Decoder mDecoder ;  // scan inital
	private DecodeResult mDecodeResult;  //scan result
	
	private String TAG = "ScanService"; //DEBUG

	@Override
	public void onCreate() {
		// TODO Auto-generated method stub
		super.onCreate();
	}
	
	
	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return aidlScan;
	}
	
	private AidlIscan aidlScan = new AidlIscan();
	
	class AidlIscan extends IScan.Stub{
		private IScanResult iResultLister ;
		private boolean scanning = false ;
		@Override
		public int init() throws RemoteException {
			Log.d(TAG, "AIDL SCAN INIT");
			mDecoder = new Decoder();
			mDecodeResult = new DecodeResult();
			try {
				mDecoder.connectDecoderLibrary();
				mDecoder.enableSymbology(SymbologyID.SYM_ALL);
				//设置EAN13校验位
				SymbologyConfig config = new SymbologyConfig(SymbologyID.SYM_EAN13);
				config.Flags = 5 ;
				config.Mask = 1 ;
				mDecoder.setSymbologyConfig(config);
				new Thread(new Runnable() {
					
					@Override
					public void run() {
						try {
							mDecoder.startScanning();
							Thread.sleep(50);
							mDecoder.stopScanning();
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						
					}
				}).start();

			} catch (DecoderException e) {
				
				e.printStackTrace();
				return INIT_FAIL;
			}
			return INIT_OK;
		}

		@Override
		public void close() throws RemoteException {
			Log.d(TAG, "AIDL SCAN CLOSE");
			if(mDecoder != null){
				try {
					mDecoder.disconnectDecoderLibrary();
				} catch (DecoderException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}

		@Override
		public void scan() throws RemoteException {
			if(!scanning){
				new Thread(new Runnable() {
					
					@Override
					public void run() {
						scanning = true ;
						if(mDecoder != null){
							try {//扫描
								mDecoder.waitForDecodeTwo(2000, mDecodeResult);
								if(mDecodeResult.length > 0){
									Log.e("barcode", mDecodeResult.barcodeData);
									//回调
									if(iResultLister != null){
										Log.e("barcode", "listner");
										iResultLister.onListener(mDecodeResult.barcodeData);
									}
									scanning = false ;
								}
							} catch (DecoderException e) {
								scanning = false ;
								e.printStackTrace();
							} catch (RemoteException e) {
								scanning = false ;
								e.printStackTrace();
							}
						}
						
					}
				}).start();
			}
			
		}

		@Override
		public void setOnResultListener(IScanResult iLister)
				throws RemoteException {
			
			iResultLister = iLister;
		}
		
	}

}
